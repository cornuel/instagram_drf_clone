openapi: 3.0.3
info:
  title: Instagram DRF Clone
  version: 1.0.0
  description: This Instagram DRF Clone is a full-fledged social media platform built
    using Django Rest Framework. It provides a range of functionalities similar to
    the original Instagram platform, including user authentication, profile management,
    post creation, commenting, tagging, searching, and more.
paths:
  /api/comments/:
    get:
      operationId: comments_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - comments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
          description: ''
    post:
      operationId: comments_create
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/comments/{id}/:
    get:
      operationId: comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: comments_destroy
      description: |-
        Deletes an instance of the object.

        Args:
            request (HttpRequest): The HTTP request object.
            *args: Variable length argument list.
            **kwargs: Arbitrary keyword arguments.

        Returns:
            Response: The HTTP response object.

        Raises:
            Exception: If an error occurs while deleting the object.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/comments/{id}/like/:
    post:
      operationId: comments_like_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/comments/{id}/likes/:
    get:
      operationId: comments_likes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/feed/:
    get:
      operationId: feed_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - feed
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostsListList'
          description: ''
  /api/posts/:
    get:
      operationId: posts_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPersonalPostListList'
          description: ''
    post:
      operationId: posts_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: Slug of the post
        required: true
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PersonalPostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PersonalPostDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
  /api/posts/{slug}/:
    get:
      operationId: posts_retrieve
      description: |-
        Retrieves an instance of the object.

        Args:
            request (HttpRequest): The HTTP request object.
            *args: Variable length argument list.
            **kwargs: Arbitrary keyword arguments.

        Returns:
            Response: The HTTP response object.

        Raises:
            Exception: If an error occurs while retrieving the object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: Slug of the post
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    put:
      operationId: posts_update
      description: |-
        Update the object with the given request data.

        Parameters:
            request (HttpRequest): The HTTP request object.

        Returns:
            Response: The updated serialized data of the object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: Slug of the post
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    patch:
      operationId: posts_partial_update
      description: |-
        Update the object with the given request data.

        Parameters:
            request (HttpRequest): The HTTP request object.

        Returns:
            Response: The updated serialized data of the object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: Slug of the post
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    delete:
      operationId: posts_destroy
      description: |-
        Deletes an instance of the object.

        Args:
            request (HttpRequest): The HTTP request object.
            *args: Variable length argument list.
            **kwargs: Arbitrary keyword arguments.

        Returns:
            Response: The HTTP response object.

        Raises:
            Exception: If an error occurs while deleting the object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: Slug of the post
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/{slug}/comment/{comment_id}/:
    get:
      operationId: posts_comment_retrieve
      parameters:
      - in: path
        name: comment_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/posts/{slug}/comments/:
    get:
      operationId: posts_comments_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/posts/{slug}/download/:
    get:
      operationId: posts_download_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsList'
          description: ''
  /api/posts/{slug}/favorite/:
    post:
      operationId: posts_favorite_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostsList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostsList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsList'
          description: ''
  /api/posts/{slug}/feature/:
    post:
      operationId: posts_feature_create
      description: |-
        Feature or unfeature a post based on the given slug.
        Parameters:
            request (Request): The request object.
            slug (str, optional): The slug of the post. Defaults to None.
        Returns:
            Response: The response object containing the status and message.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/{slug}/like/:
    post:
      operationId: posts_like_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/posts/{slug}/likes/:
    get:
      operationId: posts_likes_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/posts/{slug}/publish/:
    post:
      operationId: posts_publish_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PersonalPostDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PersonalPostDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalPostDetail'
          description: ''
  /api/posts/{slug}/tags/:
    get:
      operationId: posts_tags_retrieve
      description: |-
        Get the tags associated with a post.

        Parameters:
            request (Request): The request object.
            slug (str, optional): The slug of the post. Defaults to None.
        Returns:
            Response: The response object containing the serialized data of the tags.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /api/posts/delete_all_posts/:
    delete:
      operationId: posts_delete_all_posts_destroy
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/favorited/:
    get:
      operationId: posts_favorited_retrieve
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalPostList'
          description: ''
  /api/profiles/:
    get:
      operationId: profiles_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProfileListList'
          description: ''
    post:
      operationId: profiles_create
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/profiles/{username}/:
    get:
      operationId: profiles_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: profiles_update
      description: |-
        Update the profile of the authenticated user.
        Args:
            request (HttpRequest): The HTTP request object.
        Returns:
            Response: The updated serialized data of the profile.
        Raises:
            PermissionDenied: If the authenticated user is not the owner of the profile.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
    patch:
      operationId: profiles_partial_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPublicProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPublicProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPublicProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
    delete:
      operationId: profiles_destroy
      parameters:
      - in: path
        name: username
        schema:
          type: string
        description: Username of the profile
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/profiles/{username}/delete_profile_pic/:
    delete:
      operationId: profiles_delete_profile_pic_destroy
      description: |-
        Delete the profile picture of the authenticated user.
        Args:
            request (HttpRequest): The HTTP request object.
        Returns:
            Response: The updated serialized data of the profile without the profile picture.
        Raises:
            PermissionDenied: If the authenticated user is not the owner of the profile.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/profiles/{username}/follow/:
    post:
      operationId: profiles_follow_create
      description: |-
        Follow or unfollow a user's profile.
        Parameters:
            request (Request): The HTTP request object.
            username (str, optional): The username of the user. Defaults to None.
        Returns:
            Response: The HTTP response object containing a message indicating the result of the operation.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublicProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublicProfile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/profiles/{username}/followers/:
    get:
      operationId: profiles_followers_retrieve
      description: |-
        Retrieve the list of Profiles following the user
        Args:
            request (Request): The request object.
            username (str, optional): The username of the user. Defaults to None.
        Returns:
            Response: The serialized data of the followers.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/profiles/{username}/following/:
    get:
      operationId: profiles_following_retrieve
      description: |-
        Retrieve the list of Profiles that the user is following
        Args:
            request (Request): The HTTP request object.
            username (str, optional): The username of the user. Defaults to None.
        Returns:
            Response: The serialized data of the following.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/profiles/{username}/isFollowing/:
    get:
      operationId: profiles_isFollowing_retrieve
      description: |-
        Check if the authenticated user is following the specified profile.
        Args:
            request (Request): The HTTP request object.
            username (str, optional): The username of the profile. Defaults to None.
        Returns:
            Response: The serialized data indicating if the user is following the profile.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/profiles/{username}/posts/:
    get:
      operationId: profiles_posts_retrieve
      description: |-
        Retrieves the posts associated with a user's profile.
        Parameters:
            request (Request): The incoming request object.
            username (str, optional): The username of the user. Defaults to None.
        Returns:
            Response: The serialized data of the retrieved posts.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - profiles
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsList'
          description: ''
  /api/search/:
    get:
      operationId: search_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - search
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicProfileList'
          description: ''
  /api/tags/:
    get:
      operationId: tags_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - tags
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
    post:
      operationId: tags_create
      tags:
      - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /api/tags/{slug}/:
    get:
      operationId: tags_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    put:
      operationId: tags_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    patch:
      operationId: tags_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTag'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    delete:
      operationId: tags_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/verify/:
    post:
      operationId: token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{username}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          type: string
          readOnly: true
        post:
          type: integer
        body:
          type: string
        parent:
          type: integer
          nullable: true
        like_count:
          type: integer
          readOnly: true
        replies_count:
          type: integer
          readOnly: true
        is_liked:
          type: boolean
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - body
      - created
      - id
      - is_liked
      - like_count
      - post
      - profile
      - replies_count
      - updated
      - url
    MyTokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    PaginatedCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    PaginatedPersonalPostListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PersonalPostList'
    PaginatedPostsListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PostsList'
    PaginatedProfileListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProfileList'
    PaginatedPublicProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PublicProfile'
    PaginatedTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          type: string
          readOnly: true
        post:
          type: integer
        body:
          type: string
        parent:
          type: integer
          nullable: true
        like_count:
          type: integer
          readOnly: true
        replies_count:
          type: integer
          readOnly: true
        is_liked:
          type: boolean
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
    PatchedPublicProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        full_name:
          type: string
          maxLength: 100
        bio:
          type: string
          maxLength: 300
        profile_pic:
          type: string
          format: uri
        posts_count:
          type: integer
          readOnly: true
        is_following:
          type: boolean
          readOnly: true
        following_count:
          type: integer
          readOnly: true
        followers_count:
          type: integer
          readOnly: true
    PatchedTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        post_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
        url:
          type: string
          format: uri
          readOnly: true
    PersonalPostDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 100
        images:
          type: array
          items:
            $ref: '#/components/schemas/PostImage'
          readOnly: true
        uploaded_images:
          type: array
          items:
            type: string
          writeOnly: true
        body:
          type: string
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        tags:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        is_liked:
          type: boolean
          readOnly: true
        is_favorited:
          type: boolean
          readOnly: true
        like_count:
          type: integer
          readOnly: true
        view_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        comment_count:
          type: integer
          readOnly: true
        is_featured:
          type: boolean
        url:
          type: string
          format: uri
          readOnly: true
        is_private:
          type: boolean
      required:
      - body
      - comment_count
      - created
      - id
      - images
      - is_favorited
      - is_liked
      - like_count
      - profile
      - title
      - updated
      - uploaded_images
      - url
    PersonalPostList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 100
        images:
          type: array
          items:
            $ref: '#/components/schemas/PostImage'
          readOnly: true
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        tags:
          type: array
          items:
            type: string
        like_count:
          type: integer
          readOnly: true
        comment_count:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        is_private:
          type: boolean
      required:
      - comment_count
      - id
      - images
      - like_count
      - profile
      - title
      - url
    PostDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 100
        images:
          type: array
          items:
            $ref: '#/components/schemas/PostImage'
          readOnly: true
        uploaded_images:
          type: array
          items:
            type: string
          writeOnly: true
        body:
          type: string
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        tags:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        is_liked:
          type: boolean
          readOnly: true
        is_favorited:
          type: boolean
          readOnly: true
        like_count:
          type: integer
          readOnly: true
        view_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        comment_count:
          type: integer
          readOnly: true
        is_featured:
          type: boolean
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - body
      - comment_count
      - created
      - id
      - images
      - is_favorited
      - is_liked
      - like_count
      - profile
      - title
      - updated
      - uploaded_images
      - url
    PostImage:
      type: object
      properties:
        id:
          type: integer
        image:
          type: string
          format: uri
        thumbnail:
          type: string
          format: uri
          nullable: true
      required:
      - image
    PostsList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 100
        images:
          type: array
          items:
            $ref: '#/components/schemas/PostImage'
          readOnly: true
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        tags:
          type: array
          items:
            type: string
        like_count:
          type: integer
          readOnly: true
        comment_count:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - comment_count
      - id
      - images
      - like_count
      - profile
      - title
      - url
    ProfileList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        full_name:
          type: string
          maxLength: 100
        bio:
          type: string
          maxLength: 300
        profile_pic:
          type: string
          format: uri
        follows:
          type: array
          items:
            type: integer
      required:
      - follows
      - id
      - profile_pic
    PublicProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        full_name:
          type: string
          maxLength: 100
        bio:
          type: string
          maxLength: 300
        profile_pic:
          type: string
          format: uri
        posts_count:
          type: integer
          readOnly: true
        is_following:
          type: boolean
          readOnly: true
        following_count:
          type: integer
          readOnly: true
        followers_count:
          type: integer
          readOnly: true
      required:
      - followers_count
      - following_count
      - id
      - is_following
      - posts_count
      - profile_pic
      - username
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        post_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - id
      - name
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - password
      - url
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
